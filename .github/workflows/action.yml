#Workflow
name: Final A01028728

on:
    push:
        branches: ["A01028728"]
    pull_request:
        branches: ["A01028728"]

    workflow_dispatch:

jobs:
    build:
        runs-on: ubuntu-latest

        steps:
         - uses: actions/checkout@v2
         - name: Setup python
           uses: actions/setup-python@v3
           with:
            python-version: "3.10"
         - name: Install dependencies
           run: |
               python -m pip install --upgrade pip
               pip install flake8 pytest
               if [ -f python/requirements.txt ]; then pip install -r python3/requirements.txt; fi
         - name: Lint flake8
           run: |
               flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
               flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
         - name: Test pytest
           run: |
               RUN_ENV=dev
               coverage run -m pytest python3/test/
               coverage report
               coverage html -d cc_report/
    dockerize:
        runs-on: ubuntu-latest
        #needs: build
        steps:
         - name: Check
           uses: actions/checkout@v3
         - name: Setup docker buildx
           uses: docker/setup-buildx-action@v2
         - name: Config AWS credentials
           uses: aws-actions/configure-aws-credentials@v1
           with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: us-east-1
         - name: login amazon ECR
           id: login-ecr
           uses: aws-actions/amazon-ecr-login@v1
           with:
                registry-type: public
         - name: Build and tag image
           uses: docker/build-push-action@v4
           env:
                ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                ECR_REPOSITORY: d0z3f1c0/501ecr
                IMAGE_TAG: latest
           with:
                context: ./ASD/python3
                tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
                outputs: type=docker, dest=/tmp/${{ env.IMAGE_TAG }}.tar
         - name: Save image
           uses: actions/upload-artifact@v3
           env:
            images:
              a01028728
              latest
           with:
                name: ${{ env.images}}
                path: /tmp/${{ env.images }}.tar
    deploy:
        runs-on: ubuntu-latest
        needs: dockerize
        steps:
          - name: Setup docker buildx
            uses: docker/setup-buildx-action@v2
          - name: read artifact
            uses: actions/download-artifact@v3
            env:
              images:
                a01028728
                latest
            with:
                name: ${{ env.images }}
                path: /tmp
          - name: configure aws credentials
            uses: aws-actions/configure-aws-credentials@v1
            with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: us-east-1
          - name: login to amazon ECR
            id: login-ecr
            uses: aws-actions/amazon-ecr-login@v1
            with:
                registry-type: public
          - name: deploy image
            env:
                ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                ECR_REPOSITORY: d0z3f1c0/501ecr
                IMAGE_TAG: latest
            run: |
              docker load --input /tmp/$IMAGE_TAG.tar
              docker image ls -a
              docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

            

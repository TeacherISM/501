name: CI

on:
    push:
      branches:
        - A01751941

jobs:
  build_app:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies and check if build works
        run: |
          python -m pip install --upgrade pip
          pip install -r LJK/python/requirements.txt
          python LJK/python/src/app.py
          


  lint:
    runs-on: ubuntu-latest
    needs: build_app
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r LJK/python/requirements.txt


      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics 

  pruebas-unitarias:
    runs-on: ubuntu-latest
    needs: build_app
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r LJK/python/requirements.txt

      - name: Run tests with coverage
        env: 
          AWS_REGION: us-east-1
        run: |
          RUN_ENV=dev
          coverage run -m pytest LJK/python/test/
          coverage report
          coverage html -d cc_report/
      
      - name: Upload code coverage report
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage-report
          path: cc_report/

  package:
    runs-on: ubuntu-latest
    needs: 
      - pruebas-unitarias
      - lint
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r LJK/python/requirements.txt

      - name: ZIP package
        run: |
          RUN_ENV=dev
          zip package.zip LJK/python/src/app.py

  dockerize: 
    runs-on: ubuntu-latest
    needs: package
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Docker
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public
    
      - name: Build and tag
        id: docker-build
        uses: docker/build-push-action@v4
        env: 
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: d0z3f1c0/501ecr
          IMAGE_TAG: A01751941
        with:
          context: ./LJK/python
          tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          outputs: type=docker,dest=/tmp/${{ env.IMAGE_TAG }}.tar

      - name: Save the image
        uses: actions/upload-artifact@v3
        env:
          IMAGE_TAG: A01751941
        with:
          name: ${{ env.IMAGE_TAG }}
          path: /tmp/${{ env.IMAGE_TAG }}.tar

  deploy: 
    runs-on: ubuntu-latest
    needs: dockerize
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v2

      - name: Read artifact
        uses: actions/download-artifact@v3
        env:
          IMAGE_TAG: A01751941
        with:
          name: ${{ env.IMAGE_TAG }}
          path: /tmp
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1 
        with:
          registry-type: public

      - name: Finally deploy image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: d0z3f1c0/501ecr
          IMAGE_TAG: A01751941
        run: |
          docker load --input /tmp/${{ env.IMAGE_TAG }}.tar
          docker image ls -a
          docker tag ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest

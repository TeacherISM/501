name: Lambda Workflow A01024927 for MAIN

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
      
permissions:
  contents: read

jobs:

  linting:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 
          
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          
  unitTesting:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest coverage 
        
    - name: Test with pytest
      run: |
        coverage run -m pytest AISR/src/test.py
        coverage report
        coverage html -d cc_report/
        
  package:
    runs-on: ubuntu-latest
    needs: [unitTesting, linting]
    if: github.event_name == 'push'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Install zip
        run: sudo apt-get update && sudo apt-get install -y zip
        
      - name: Zip src directory
        run: zip -r test_package.zip . -i AISR/
        
      - name: Check zip size
        run: du -sh test_package.zip
        
      - name: Upload zip
        uses: actions/upload-artifact@v3
        with:
          name: package_zip
          path: test_package.zip
          
  dockerize:
    runs-on: ubuntu-latest
    needs: package
    if: github.event_name == 'push'

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR Public
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public

      - name: Create Docker builder
        run: |
          docker buildx create --use
          
      - name: Build and tag image 1
        uses: docker/build-push-action@v4
        env:
          ECR_REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
          ECR_REPOSITORY: d0z3f1c0/501ecr
          IMAGE_TAG: A01024927
        with:
            context: ./AISR
            tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
            outputs: type=docker,dest=/tmp/${{ env.IMAGE_TAG }}.tar

      - name: Save image 1
        uses: actions/upload-artifact@v3
        env:
          IMAGE_TAG: A01024927
        with:
          name: ${{ env.IMAGE_TAG }}
          path: /tmp/${{ env.IMAGE_TAG }}.tar
          
      - name: Build and tag image 2
        uses: docker/build-push-action@v4
        env:
          ECR_REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
          ECR_REPOSITORY: d0z3f1c0/501ecr
          IMAGE_TAG: latest
        with:
            context: ./AISR
            tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
            outputs: type=docker,dest=/tmp/${{ env.IMAGE_TAG }}.tar

      - name: Save image 2
        uses: actions/upload-artifact@v3
        env:
          IMAGE_TAG: latest
        with:
          name: ${{ env.IMAGE_TAG }}
          path: /tmp/${{ env.IMAGE_TAG }}.tar


          
          
          
  deploy:
          runs-on: ubuntu-latest
          needs: [dockerize, package]
          if: github.event_name == 'push'

          steps:
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2

            - name: Read artifact for image 1
              uses: actions/download-artifact@v3
              env:
                IMAGE_TAG: A01024927
              with:
                name: ${{ env.IMAGE_TAG }}
                path: /tmp
                
            - name: Read artifact for image 2
              uses: actions/download-artifact@v3
              env:
                IMAGE_TAG: latest
              with:
                name: ${{ env.IMAGE_TAG }}
                path: /tmp

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: us-east-1

            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1
              with:
                registry-type: public

            - name: Deploy image 1
              env:
                ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                ECR_REPOSITORY: d0z3f1c0/501ecr
                URI_REPOSITORY: public.ecr.aws/d0z3f1c0/501ecr
                IMAGE_TAG: A01024927
#                 FINAL_IMG_TAG: ${{ env.URI_REPOSITORY }}-${{ env.IMAGE_TAG }}
              run: |
                docker load --input /tmp/$IMAGE_TAG.tar
                docker image ls -a
                docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
                
                
            - name: Deploy image 2
              env:
                ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                ECR_REPOSITORY: d0z3f1c0/501ecr
                URI_REPOSITORY: public.ecr.aws/d0z3f1c0/501ecr
                IMAGE_TAG: latest
#                 FINAL_IMG_TAG: ${{ env.URI_REPOSITORY }}-${{ env.IMAGE_TAG }}
              run: |
                docker load --input /tmp/$IMAGE_TAG.tar
                docker image ls -a
                docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
                
     

# This workflow will put the lambda code in a Lambda image and upload it to an ECR repsitory

name: Sum Lambda Deployment

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      [main, A01029746]
    

jobs:
    # This job applies linting to the lambda
    build:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
            - name: Use Node.js 18.x
              uses: actions/setup-node@v3
              with:
                  node-version: '18.x'
            - name: Install Dependencies and Lint
              working-directory: ./SGV/lambda
              run: |
                    npm install
                    npm run lint

    test:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
            - name: Use Node.js 18.x
              uses: actions/setup-node@v3
              with:
                  node-version: '18.x'
            - name: Test Code and Generate Coverage Report
              working-directory: ./SGV/lambda
              run: |
                     npm install
                     npm run test

    package:
        runs-on: ubuntu-latest

        if: github.ref == 'refs/heads/mainTest'

        needs: [build, test]
        steps:
            - uses: actions/checkout@v2
            - name: Use Node.js 18.x
              uses: actions/setup-node@v3
              with:
                  node-version: '18.x'
            - name: Install dependencies and package
              working-directory: ./SGV/lambda
              run: npm install
            - name: Package Lambda
              run: zip -r lambda.zip ./SGV/lambda

    dockerize:
        runs-on: ubuntu-latest

        if: github.ref == 'refs/heads/mainTest'

        needs: package
        steps:
            - name: Checkout
              uses: actions/checkout@v2
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v1
            - name: Configure AWS Credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: us-east-1
            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1
              with:
                registry-type: public
            # First image
            - name: Build and tag image
              uses: docker/build-push-action@v4
              env:
                ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                ECR_REPOSITORY: d0z3f1c0/501ecr
                IMAGE_TAG: A01029746
              with:
                context: ./SGV/lambda
                tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
                outputs: type=docker,dest=/tmp/${{ env.IMAGE_TAG }}.tar
            - name: Save image
              uses: actions/upload-artifact@v3
              env:
                IMAGE_TAG: A01029746
              with:
                name: ${{ env.IMAGE_TAG }}
                path: /tmp/${{ env.IMAGE_TAG }}.tar

    dockerize-latest:
        runs-on: ubuntu-latest

        if: github.ref == 'refs/heads/mainTest'

        needs: package
        steps:
            - name: Checkout
              uses: actions/checkout@v2
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v1
            - name: Configure AWS Credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: us-east-1
            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1
              with:
                registry-type: public
            # Latest image
            - name: Build and tag image
              uses: docker/build-push-action@v4
              env:
                ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                ECR_REPOSITORY: d0z3f1c0/501ecr
                IMAGE_TAG: A01029746-latest
              with:
                context: ./SGV/lambda
                tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
                outputs: type=docker,dest=/tmp/${{ env.IMAGE_TAG }}.tar
            - name: Save image
              uses: actions/upload-artifact@v3
              env:
                IMAGE_TAG: A01029746-latest
              with:
                name: ${{ env.IMAGE_TAG }}
                path: /tmp/${{ env.IMAGE_TAG }}.tar
     
    deploy:
      runs-on: ubuntu-latest

      if: github.ref == 'refs/heads/mainTest'

      needs: [dockerize, package]
      steps:
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2
            - name: Read artifact
              uses: actions/download-artifact@v3
              env:
                IMAGE_TAG: A01029746
              with:
                name: ${{ env.IMAGE_TAG }}
                path: /tmp

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: us-east-1

            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1
              with:
                registry-type: public

            - name: Deploy image
              env:
                ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                ECR_REPOSITORY: d0z3f1c0/501ecr
                IMAGE_TAG: A01029746
              run: |
                docker load --input /tmp/$IMAGE_TAG.tar
                docker image ls -a
                docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    deploy-latest:
      runs-on: ubuntu-latest

      if: github.ref == 'refs/heads/mainTest'

      needs: [dockerize-latest, package]
      steps:
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2
            - name: Read artifact
              uses: actions/download-artifact@v3
              env:
                IMAGE_TAG: A01029746-latest
              with:
                name: ${{ env.IMAGE_TAG }}
                path: /tmp

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: us-east-1

            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1
              with:
                registry-type: public

            - name: Deploy image
              env:
                ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                ECR_REPOSITORY: d0z3f1c0/501ecr
                IMAGE_TAG: A01029746-latest
              run: |
                docker load --input /tmp/$IMAGE_TAG.tar
                docker image ls -a
                docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG